// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ================================
// ENUM TYPES
// ================================

enum UserRole {
  IMPORTADOR
  SUPERADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RequestStatus {
  DRAFT
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum DocumentType {
  MATRICULA_COMERCIO
  NIT
  CERTIFICADO_ADUANA
  PODER_REPRESENTANTE
  CARNET_IDENTIDAD
  PROFORMA_INVOICE
  FACTURA_COMERCIAL
  CONTRATO
  COMPROBANTE_PAGO
  OTHER
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum QuotationStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

enum ContractStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentType {
  DEPOSIT
  PARTIAL
  FINAL
  REFUND
}

enum Currency {
  USD
  EUR
  CNY
  JPY
  BOB
  PEN
  COP
  USDT
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}

enum ActivityType {
  IMPORTACION_GENERAL
  IMPORTACION_ALIMENTOS
  IMPORTACION_TEXTILES
  IMPORTACION_MAQUINARIA
  IMPORTACION_ELECTRONICA
  IMPORTACION_VEHICULOS
  COMERCIO_MAYORISTA
  COMERCIO_MINORISTA
  OTROS
}

// ================================
// CORE MODELS
// ================================

model Profile {
  id            String               @id @default(cuid())
  userId        String               @unique
  avatarUrl     String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  active        Boolean              @default(true)
  firstName     String?
  lastName      String?
  role          UserRole             @default(IMPORTADOR)
  
  // Additional fields from users table (email/password handled by Supabase Auth)
  status        UserStatus           @default(ACTIVE)
  phone         String?
  lastLogin     DateTime?
  
  // Company association (optional - superadmins don't belong to companies)
  companyId     String?
  company       Company?             @relation(fields: [companyId], references: [id], onDelete: SetNull)
  
  // Relations
  createdRequests           Request[]               @relation("RequestCreatedBy")
  assignedRequests          Request[]               @relation("RequestAssignedTo")
  createdQuotations         Quotation[]             @relation("QuotationCreatedBy")
  assignedQuotations        Quotation[]             @relation("QuotationAssignedTo")
  createdContracts          Contract[]              @relation("ContractCreatedBy")
  assignedContracts         Contract[]              @relation("ContractAssignedTo")
  notifications             Notification[]
  auditLogs                 AuditLog[]

  @@index([userId])
  @@index([role])
  @@index([status])
  @@index([companyId])
}

model Company {
  id              String           @id @default(cuid())
  name            String
  ruc             String           @unique
  country         String
  activity        ActivityType
  
  // Contact information
  contactName     String
  contactPosition String
  email           String
  phone           String
  
  // Banking information (from registration request)
  bankingDetails  String?
  
  // Status and timestamps
  status          UserStatus       @default(ACTIVE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relations - now a company can have multiple users
  users                   Profile[]
  registrationRequest     RegistrationRequest?
  requests                Request[]
  documents              Document[]
  quotations             Quotation[]
  contracts              Contract[]
  payments               Payment[]

  @@index([ruc])
  @@index([status])
}

model RegistrationRequest {
  id              String               @id @default(cuid())
  
  // Company information
  companyName     String
  ruc             String
  country         String
  activity        ActivityType
  
  // Contact information
  contactName     String
  contactPosition String
  email           String
  phone           String
  
  // Banking information
  bankingDetails  String
  
  // Status and review
  status          RegistrationStatus   @default(PENDING)
  reviewedAt      DateTime?
  reviewedBy      String?
  reviewNotes     String?
  rejectionReason String?
  
  // Generated credentials
  generatedPassword String?
  
  // Timestamps
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  
  // Relations
  companyId       String?              @unique
  company         Company?             @relation(fields: [companyId], references: [id], onDelete: SetNull)
  documents       Document[]
}

model Provider {
  id              String           @id @default(cuid())
  name            String
  country         String
  
  // Banking information
  bankingDetails  String
  
  // Contact information
  email           String?
  phone           String?
  
  // Timestamps
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relations
  requests        Request[]
}

model Request {
  id            String             @id @default(cuid())
  code          String             @unique
  amount        Decimal            @db.Decimal(15,2)
  currency      Currency           @default(USDT)
  description   String
  status        RequestStatus      @default(PENDING)
  
  // Review information
  reviewNotes   String?
  reviewedAt    DateTime?
  
  // Timestamps
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  
  // Relations
  providerId    String
  provider      Provider           @relation(fields: [providerId], references: [id])
  
  companyId     String
  company       Company            @relation(fields: [companyId], references: [id])
  
  createdById   String
  createdBy     Profile            @relation("RequestCreatedBy", fields: [createdById], references: [id])
  
  assignedToId  String?
  assignedTo    Profile?           @relation("RequestAssignedTo", fields: [assignedToId], references: [id])
  
  documents     Document[]
  quotations    Quotation[]
  contracts     Contract[]
  payments      Payment[]

  @@index([code])
  @@index([status])
  @@index([companyId])
  @@index([createdById])
  @@index([createdAt])
}

model Document {
  id          String            @id @default(cuid())
  filename    String
  fileUrl     String
  fileSize    Int
  mimeType    String
  type        DocumentType
  status      DocumentStatus    @default(PENDING)
  
  // Review information
  reviewNotes String?
  reviewedAt  DateTime?
  reviewedBy  String?
  
  // Timestamps
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Relations (nullable - document can belong to different entities)
  companyId             String?
  company               Company?       @relation(fields: [companyId], references: [id])
  
  requestId             String?
  request               Request?       @relation(fields: [requestId], references: [id])
  
  registrationRequestId String?
  registrationRequest   RegistrationRequest? @relation(fields: [registrationRequestId], references: [id])
  
  quotationId           String?
  quotation             Quotation?     @relation(fields: [quotationId], references: [id])
  
  contractId            String?
  contract              Contract?      @relation(fields: [contractId], references: [id])
  
  paymentId             String?
  payment               Payment?       @relation(fields: [paymentId], references: [id])

  @@index([type])
  @@index([status])
  @@index([companyId])
  @@index([requestId])
}

model Quotation {
  id            String              @id @default(cuid())
  code          String              @unique
  amount        Decimal             @db.Decimal(15,2)
  currency      Currency            @default(USD)
  description   String
  validUntil    DateTime
  status        QuotationStatus     @default(DRAFT)
  
  // Pricing breakdown
  baseAmount    Decimal             @default(0) @db.Decimal(15,2)
  fees          Decimal             @default(0) @db.Decimal(15,2)
  taxes         Decimal             @default(0) @db.Decimal(15,2)
  totalAmount   Decimal             @db.Decimal(15,2)
  
  // Terms and conditions
  terms         String?
  notes         String?
  
  // Timestamps
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  sentAt        DateTime?
  respondedAt   DateTime?
  
  // Relations
  requestId     String
  request       Request             @relation(fields: [requestId], references: [id])
  
  companyId     String
  company       Company             @relation(fields: [companyId], references: [id])
  
  createdById   String
  createdBy     Profile             @relation("QuotationCreatedBy", fields: [createdById], references: [id])
  
  assignedToId  String?
  assignedTo    Profile?            @relation("QuotationAssignedTo", fields: [assignedToId], references: [id])
  
  documents     Document[]
  contracts     Contract[]

  @@index([code])
  @@index([status])
  @@index([requestId])
  @@index([validUntil])
}

model Contract {
  id            String           @id @default(cuid())
  code          String           @unique
  title         String
  description   String
  amount        Decimal          @db.Decimal(15,2)
  currency      Currency         @default(USD)
  status        ContractStatus   @default(DRAFT)
  
  // Contract dates
  startDate     DateTime
  endDate       DateTime
  
  // Terms
  terms         String
  conditions    String?
  
  // Timestamps
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  signedAt      DateTime?
  
  // Relations
  requestId     String?
  request       Request?         @relation(fields: [requestId], references: [id])
  
  quotationId   String?
  quotation     Quotation?       @relation(fields: [quotationId], references: [id])
  
  companyId     String
  company       Company          @relation(fields: [companyId], references: [id])
  
  createdById   String
  createdBy     Profile          @relation("ContractCreatedBy", fields: [createdById], references: [id])
  
  assignedToId  String?
  assignedTo    Profile?         @relation("ContractAssignedTo", fields: [assignedToId], references: [id])
  
  documents     Document[]
  payments      Payment[]

  @@index([code])
  @@index([status])
  @@index([companyId])
}

model Payment {
  id            String         @id @default(cuid())
  code          String         @unique
  amount        Decimal        @db.Decimal(15,2)
  currency      Currency       @default(USDT)
  type          PaymentType
  status        PaymentStatus  @default(PENDING)
  
  // Payment details
  description   String
  reference     String?
  transactionId String?
  
  // Banking information
  fromAccount   String?
  toAccount     String?
  
  // Dates
  dueDate       DateTime?
  paidAt        DateTime?
  
  // Timestamps
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  requestId     String?
  request       Request?       @relation(fields: [requestId], references: [id])
  
  contractId    String?
  contract      Contract?      @relation(fields: [contractId], references: [id])
  
  companyId     String
  company       Company        @relation(fields: [companyId], references: [id])
  
  documents     Document[]

  @@index([code])
  @@index([status])
  @@index([companyId])
  @@index([dueDate])
}

model Notification {
  id        String             @id @default(cuid())
  title     String
  message   String
  type      NotificationType   @default(INFO)
  read      Boolean            @default(false)
  
  // Metadata
  metadata  Json?
  
  // Timestamps
  createdAt DateTime           @default(now())
  readAt    DateTime?
  
  // Relations
  profileId String
  profile   Profile            @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId, read])
  @@index([createdAt])
}

model AuditLog {
  id        String     @id @default(cuid())
  action    String
  entity    String
  entityId  String
  
  // Change details
  oldValues Json?
  newValues Json?
  
  // Context
  ipAddress String?
  userAgent String?
  
  // Timestamps
  createdAt DateTime   @default(now())
  
  // Relations
  profileId String
  profile   Profile    @relation(fields: [profileId], references: [id])

  @@index([profileId])
  @@index([entity, entityId])
  @@index([createdAt])
}

model Configuration {
  id          String     @id @default(cuid())
  key         String     @unique
  value       String
  
  // Metadata
  description String?
  category    String?
  
  // Timestamps
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}
