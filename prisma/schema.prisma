generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id                 String         @id @default(cuid())
  userId             String         @unique
  avatarUrl          String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  active             Boolean        @default(true)
  firstName          String?
  lastName           String?
  role               UserRole       @default(IMPORTADOR)
  status             UserStatus     @default(ACTIVE)
  phone              String?
  lastLogin          DateTime?
  companyId          String?
  auditLogs          AuditLog[]
  assignedContracts  Contract[]     @relation("ContractAssignedTo")
  createdContracts   Contract[]     @relation("ContractCreatedBy")
  notifications      Notification[]
  company            Company?       @relation(fields: [companyId], references: [id])
  assignedQuotations Quotation[]    @relation("QuotationAssignedTo")
  createdQuotations  Quotation[]    @relation("QuotationCreatedBy")
  assignedRequests   Request[]      @relation("RequestAssignedTo")
  createdRequests    Request[]      @relation("RequestCreatedBy")

  @@index([userId])
  @@index([role])
  @@index([status])
  @@index([companyId])
  @@map("profiles")
}

model Company {
  id                  String               @id @default(cuid())
  name                String
  ruc                 String               @unique
  country             String
  activity            ActivityType
  contactName         String
  contactPosition     String
  email               String
  phone               String
  bankingDetails      String?
  status              UserStatus           @default(ACTIVE)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  contracts           Contract[]
  documents           Document[]
  payments            Payment[]
  users               Profile[]
  quotations          Quotation[]
  registrationRequest RegistrationRequest?
  requests            Request[]

  @@index([ruc])
  @@index([status])
}

model RegistrationRequest {
  id                String             @id @default(cuid())
  companyName       String
  ruc               String
  country           String
  activity          ActivityType
  contactName       String
  contactPosition   String
  email             String
  phone             String
  bankingDetails    String
  status            RegistrationStatus @default(PENDING)
  reviewedAt        DateTime?
  reviewedBy        String?
  reviewNotes       String?
  rejectionReason   String?
  generatedPassword String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  companyId         String?            @unique
  documents         Document[]
  company           Company?           @relation(fields: [companyId], references: [id])
}

model Provider {
  id             String    @id @default(cuid())
  name           String
  country        String
  bankingDetails String
  email          String?
  phone          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  requests       Request[]
}

model Request {
  id             String        @id @default(cuid())
  code           String        @unique
  amount         Decimal       @db.Decimal(15, 2)
  currency       Currency      @default(USDT)
  description    String
  status         RequestStatus @default(PENDING)
  rejectionCount Int           @default(0)
  reviewNotes    String?
  reviewedAt     DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  providerId     String
  companyId      String
  createdById    String
  assignedToId   String?
  contracts      Contract[]
  documents      Document[]
  payments       Payment[]
  quotations     Quotation[]
  assignedTo     Profile?      @relation("RequestAssignedTo", fields: [assignedToId], references: [id])
  company        Company       @relation(fields: [companyId], references: [id])
  createdBy      Profile       @relation("RequestCreatedBy", fields: [createdById], references: [id])
  provider       Provider      @relation(fields: [providerId], references: [id])

  @@index([code])
  @@index([status])
  @@index([companyId])
  @@index([createdById])
  @@index([createdAt])
}

model Document {
  id                    String               @id @default(cuid())
  filename              String
  fileUrl               String
  fileSize              Int
  mimeType              String
  type                  DocumentType
  status                DocumentStatus       @default(PENDING)
  reviewNotes           String?
  reviewedAt            DateTime?
  reviewedBy            String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  companyId             String?
  requestId             String?
  registrationRequestId String?
  quotationId           String?
  contractId            String?
  paymentId             String?
  company               Company?             @relation(fields: [companyId], references: [id])
  contract              Contract?            @relation(fields: [contractId], references: [id])
  payment               Payment?             @relation(fields: [paymentId], references: [id])
  quotation             Quotation?           @relation(fields: [quotationId], references: [id])
  registrationRequest   RegistrationRequest? @relation(fields: [registrationRequestId], references: [id])
  request               Request?             @relation(fields: [requestId], references: [id])

  @@index([type])
  @@index([status])
  @@index([companyId])
  @@index([requestId])
}

model Quotation {
  id              String          @id @default(cuid())
  code            String          @unique
  amount          Decimal         @db.Decimal(15, 2)
  currency        Currency        @default(USD)
  description     String
  validUntil      DateTime
  status          QuotationStatus @default(DRAFT)
  baseAmount      Decimal         @default(0) @db.Decimal(15, 2)
  fees            Decimal         @default(0) @db.Decimal(15, 2)
  taxes           Decimal         @default(0) @db.Decimal(15, 2)
  totalAmount     Decimal         @db.Decimal(15, 2)
  terms           String?
  notes           String?
  rejectionReason String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  sentAt          DateTime?
  respondedAt     DateTime?
  requestId       String
  companyId       String
  createdById     String
  assignedToId    String?
  contracts       Contract[]
  documents       Document[]
  assignedTo      Profile?        @relation("QuotationAssignedTo", fields: [assignedToId], references: [id])
  company         Company         @relation(fields: [companyId], references: [id])
  createdBy       Profile         @relation("QuotationCreatedBy", fields: [createdById], references: [id])
  request         Request         @relation(fields: [requestId], references: [id])

  @@index([code])
  @@index([status])
  @@index([requestId])
  @@index([validUntil])
}

model Contract {
  id           String         @id @default(cuid())
  code         String         @unique
  title        String
  description  String
  amount       Decimal        @db.Decimal(15, 2)
  currency     Currency       @default(USD)
  status       ContractStatus @default(DRAFT)
  startDate    DateTime
  endDate      DateTime
  terms        String
  conditions   String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  signedAt     DateTime?
  requestId    String?
  quotationId  String?
  companyId    String
  createdById  String
  assignedToId String?
  assignedTo   Profile?       @relation("ContractAssignedTo", fields: [assignedToId], references: [id])
  company      Company        @relation(fields: [companyId], references: [id])
  createdBy    Profile        @relation("ContractCreatedBy", fields: [createdById], references: [id])
  quotation    Quotation?     @relation(fields: [quotationId], references: [id])
  request      Request?       @relation(fields: [requestId], references: [id])
  documents    Document[]
  payments     Payment[]

  @@index([code])
  @@index([status])
  @@index([companyId])
}

model Payment {
  id            String        @id @default(cuid())
  code          String        @unique
  amount        Decimal       @db.Decimal(15, 2)
  currency      Currency      @default(USDT)
  type          PaymentType
  status        PaymentStatus @default(PENDING)
  description   String
  reference     String?
  transactionId String?
  fromAccount   String?
  toAccount     String?
  dueDate       DateTime?
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  requestId     String?
  contractId    String?
  companyId     String
  documents     Document[]
  company       Company       @relation(fields: [companyId], references: [id])
  contract      Contract?     @relation(fields: [contractId], references: [id])
  request       Request?      @relation(fields: [requestId], references: [id])

  @@index([code])
  @@index([status])
  @@index([companyId])
  @@index([dueDate])
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType @default(INFO)
  read      Boolean          @default(false)
  metadata  Json?
  createdAt DateTime         @default(now())
  readAt    DateTime?
  profileId String
  profile   Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId, read])
  @@index([createdAt])
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  entity    String
  entityId  String
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id])

  @@index([profileId])
  @@index([entity, entityId])
  @@index([createdAt])
}

model Configuration {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  IMPORTADOR
  SUPERADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RequestStatus {
  DRAFT
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum DocumentType {
  MATRICULA_COMERCIO
  NIT
  CERTIFICADO_ADUANA
  PODER_REPRESENTANTE
  CARNET_IDENTIDAD
  PROFORMA_INVOICE
  FACTURA_COMERCIAL
  CONTRATO
  COMPROBANTE_PAGO
  OTHER
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum QuotationStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

enum ContractStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentType {
  DEPOSIT
  PARTIAL
  FINAL
  REFUND
}

enum Currency {
  USD
  EUR
  CNY
  JPY
  BOB
  PEN
  COP
  USDT
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}

enum ActivityType {
  IMPORTACION_GENERAL
  IMPORTACION_ALIMENTOS
  IMPORTACION_TEXTILES
  IMPORTACION_MAQUINARIA
  IMPORTACION_ELECTRONICA
  IMPORTACION_VEHICULOS
  COMERCIO_MAYORISTA
  COMERCIO_MINORISTA
  OTROS
}
